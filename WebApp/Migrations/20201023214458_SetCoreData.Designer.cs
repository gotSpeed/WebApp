// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApp.DataAccess.DbContexts;

namespace WebApp.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20201023214458_SetCoreData")]
    partial class SetCoreData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("WebApp.Domain.Core.Petition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Header")
                        .HasColumnType("text");

                    b.Property<long>("NextGoal")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<long>("TotalGoal")
                        .HasColumnType("bigint");

                    b.Property<long>("VotersAmount")
                        .HasColumnType("bigint");

                    b.Property<List<uint>>("VotersId")
                        .HasColumnType("bigint[]");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Petitions");
                });

            modelBuilder.Entity("WebApp.Domain.Core.Poll", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Header")
                        .HasColumnType("text");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<List<uint>>("OptionsId")
                        .HasColumnType("bigint[]");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<long>("VotersAmount")
                        .HasColumnType("bigint");

                    b.Property<List<uint>>("VotersId")
                        .HasColumnType("bigint[]");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("WebApp.Domain.Core.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApp.Domain.Core.VotingOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<long>("VotersAmount")
                        .HasColumnType("bigint");

                    b.Property<List<uint>>("VotersId")
                        .HasColumnType("bigint[]");

                    b.HasKey("Id");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("WebApp.Domain.Core.Petition", b =>
                {
                    b.HasOne("WebApp.Domain.Core.User", "Author")
                        .WithMany("UserPetitions")
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("WebApp.Domain.Core.Poll", b =>
                {
                    b.HasOne("WebApp.Domain.Core.User", "Author")
                        .WithMany("UserPolls")
                        .HasForeignKey("AuthorId");
                });
#pragma warning restore 612, 618
        }
    }
}
